diff -Naur dnspython-2.2.1/tests/test_dnssec.py dnspython-2.2.1-upd/tests/test_dnssec.py
--- dnspython-2.2.1/tests/test_dnssec.py	2022-03-06 20:04:56.000000000 -0300
+++ dnspython-2.2.1-upd/tests/test_dnssec.py	2023-01-06 15:17:49.763218922 -0300
@@ -271,18 +271,22 @@
         self.assertEqual(dns.dnssec.key_id(rsamd5_keys[abs_example][0]), 30239)
         self.assertEqual(dns.dnssec.key_id(rsamd5_keys[abs_example][1]), 62992)
 
+    @unittest.skip(reason="SHA1 is not supported.")
     def testAbsoluteRSAGood(self):  # type: () -> None
         dns.dnssec.validate(abs_soa, abs_soa_rrsig, abs_keys, None, when)
 
+    @unittest.skip(reason="SHA1 is not supported.")
     def testDuplicateKeytag(self):  # type: () -> None
         dns.dnssec.validate(abs_soa, abs_soa_rrsig, abs_keys_duplicate_keytag, None, when)
 
+    @unittest.skip(reason="SHA1 is not supported.")
     def testAbsoluteRSABad(self):  # type: () -> None
         def bad():  # type: () -> None
             dns.dnssec.validate(abs_other_soa, abs_soa_rrsig, abs_keys, None,
                                 when)
         self.assertRaises(dns.dnssec.ValidationFailure, bad)
 
+    @unittest.skip(reason="SHA1 is not supported.")
     def testRelativeRSAGood(self):  # type: () -> None
         dns.dnssec.validate(rel_soa, rel_soa_rrsig, rel_keys,
                             abs_dnspython_org, when)
@@ -290,6 +294,7 @@
         dns.dnssec.validate(rel_soa, rel_soa_rrsig, rel_keys,
                             'dnspython.org', when)
 
+    @unittest.skip(reason="SHA1 is not supported.")
     def testRelativeRSABad(self):  # type: () -> None
         def bad():  # type: () -> None
             dns.dnssec.validate(rel_other_soa, rel_soa_rrsig, rel_keys,
@@ -358,6 +363,7 @@
         dns.dnssec.validate(rsasha512_ns, rsasha512_ns_rrsig, rsasha512_keys,
                             None, rsasha512_when)
 
+    @unittest.skip(reason="SHA1 is not supported.")
     def testWildcardGoodAndBad(self):
         dns.dnssec.validate(wildcard_txt, wildcard_txt_rrsig,
                             wildcard_keys, None, wildcard_when)
@@ -384,6 +390,7 @@
             dns.dnssec.validate_rrsig(com_txt, com_txt_rrsig[0], wildcard_keys,
                                       None, wildcard_when)
 
+    @unittest.skip(reason="SHA1 is not supported.")
     def testAlternateParameterFormats(self):  # type: () -> None
         # Pass rrset and rrsigset as (name, rdataset) tuples, not rrsets
         rrset = (abs_soa.name, abs_soa.to_rdataset())
